
--- lib/main.dart ---
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'providers/user_provider.dart';
import 'services/api_service.dart';
import 'views/welcome_screen.dart';

void main() {
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => UserProvider()),
        Provider(create: (context) => ApiService()),
      ],
      child: const PetformApp(),
    ),
  );
}

class PetformApp extends StatelessWidget {
  const PetformApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Petform',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        scaffoldBackgroundColor: Colors.white,
        bottomNavigationBarTheme: const BottomNavigationBarThemeData(
          backgroundColor: Colors.white,
          selectedItemColor: Colors.blue,
          unselectedItemColor: Colors.grey,
        ),
      ),
      home: const WelcomeScreen(),
    );
  }
}

--- lib/providers/feed_provider.dart ---
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import '../models/post.dart';
import '../services/api_service.dart';

class FeedProvider with ChangeNotifier {
  String _selectedPetType = 'All'; // Default filter
  List<Post> _posts = [];
  bool _isLoading = false;

  String get selectedPetType => _selectedPetType;
  List<Post> get posts => _posts;
  bool get isLoading => _isLoading;

  void setPetType(String petType) {
    _selectedPetType = petType;
    notifyListeners();
  }

  Future<void> fetchPosts(BuildContext context) async {
    _isLoading = true;
    notifyListeners();

    final apiService = Provider.of<ApiService>(context, listen: false);
    _posts = await apiService.getPosts(petType: _selectedPetType);

    _isLoading = false;
    notifyListeners();
  }
}

--- lib/providers/user_provider.dart ---
import 'package:flutter/foundation.dart';
import '../services/api_service.dart';
import '../models/pet.dart';

class UserProvider with ChangeNotifier {
  String? _email;
  List<Pet> _pets = [];
  final ApiService _apiService = ApiService();

  String? get email => _email;
  List<Pet> get pets => _pets;
  bool get isLoggedIn => _email != null;

  Future<void> setUser(String email) async {
    _email = email;
    _pets = await _apiService.getPets();
    notifyListeners();
  }

  void clearUser() {
    _email = null;
    _pets = [];
    notifyListeners();
  }
}

--- lib/models/tracking_metric.dart ---
class TrackingMetric {
  final String? id;
  final String? petId;
  final String? name;
  final String? value;
  final String? frequency; // daily, weekly, monthly
  final DateTime? lastCompletion;
  final DateTime? createdAt;

  TrackingMetric({
    this.id,
    this.petId,
    this.name,
    this.value,
    this.frequency,
    this.lastCompletion,
    this.createdAt,
  });

  factory TrackingMetric.fromJson(Map<String, dynamic> json) {
    return TrackingMetric(
      id: json['id'] as String?,
      petId: json['petId'] as String?,
      name: json['name'] as String?,
      value: json['value'] as String?,
      frequency: json['frequency'] as String?,
      lastCompletion: json['last_completion'] != null
          ? DateTime.parse(json['last_completion'] as String)
          : null,
      createdAt: json['created_at'] != null
          ? DateTime.parse(json['created_at'] as String)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'petId': petId,
      'name': name,
      'value': value,
      'frequency': frequency,
      'last_completion': lastCompletion?.toIso8601String(),
      'created_at': createdAt?.toIso8601String(),
    };
  }
}

--- lib/models/post.dart ---
class Post {
  final int? id;
  final String title;
  final String content;
  final String author;
  final String petType; // e.g., Dog, Cat, Turtle
  final String? imageUrl; // For Reddit/community images
  final int? upvotes; // For Reddit-style interactions
  final DateTime createdAt;

  Post({
    this.id,
    required this.title,
    required this.content,
    required this.author,
    required this.petType,
    this.imageUrl,
    this.upvotes,
    required this.createdAt,
  });

  factory Post.fromJson(Map<String, dynamic> json) {
    return Post(
      id: json['id'] as int?,
      title: json['title'] as String,
      content: json['content'] as String,
      author: json['author'] as String,
      petType: json['petType'] as String,
      imageUrl: json['imageUrl'] as String?,
      upvotes: json['upvotes'] as int?,
      createdAt: DateTime.parse(json['createdAt'] as String),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'content': content,
      'author': author,
      'petType': petType,
      'imageUrl': imageUrl,
      'upvotes': upvotes,
      'createdAt': createdAt.toIso8601String(),
    };
  }
}

--- lib/models/user.dart ---
import 'pet.dart';

class User {
  final int id;
  final String email;
  final List<Pet> pets;

  User({required this.id, required this.email, required this.pets});

  factory User.fromJson(Map<String, dynamic> json) {
    return User(
      id: json['id'] as int,
      email: json['email'] as String,
      pets: (json['pets'] as List<dynamic>? ?? []).map((p) => Pet.fromJson(p)).toList(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'email': email,
      'pets': pets.map((p) => p.toJson()).toList(),
    };
  }
}

--- lib/models/pet.dart ---
import 'tracking_metric.dart';

class Pet {
  final int? id;
  final String name;
  final String species; // e.g., Dog, Cat, Turtle
  final String? breed;
  final int? age;
  final String? litterType; // Cat-specific
  final String? tankSize; // Turtle-specific
  final String? cageSize; // Bird-specific
  final String? favoriteToy; // Dog-specific
  final List<TrackingMetric> metrics;

  Pet({
    this.id,
    required this.name,
    required this.species,
    this.breed,
    this.age,
    this.litterType,
    this.tankSize,
    this.cageSize,
    this.favoriteToy,
    this.metrics = const [],
  });

  factory Pet.fromJson(Map<String, dynamic> json) {
    return Pet(
      id: json['id'] as int?,
      name: json['name'] as String,
      species: json['species'] as String,
      breed: json['breed'] as String?,
      age: json['age'] as int?,
      litterType: json['litterType'] as String?,
      tankSize: json['tankSize'] as String?,
      cageSize: json['cageSize'] as String?,
      favoriteToy: json['favoriteToy'] as String?,
      metrics: (json['metrics'] as List<dynamic>?)
          ?.map((m) => TrackingMetric.fromJson(m as Map<String, dynamic>))
          .toList() ?? [],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'species': species,
      'breed': breed,
      'age': age,
      'litterType': litterType,
      'tankSize': tankSize,
      'cageSize': cageSize,
      'favoriteToy': favoriteToy,
      'metrics': metrics.map((m) => m.toJson()).toList(),
    };
  }
}

--- lib/views/post_detail_screen.dart ---
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../models/post.dart';

class PostDetailScreen extends StatelessWidget {
  final Post post;

  const PostDetailScreen({super.key, required this.post});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(post.title),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                CircleAvatar(
                  child: Text(post.author[0]),
                ),
                const SizedBox(width: 8),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      post.author,
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Text(
                      post.petType,
                      style: TextStyle(color: Colors.grey[600], fontSize: 12),
                    ),
                  ],
                ),
              ],
            ),
            const SizedBox(height: 16),
            Text(
              post.title,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            if (post.imageUrl != null)
              CachedNetworkImage(
                imageUrl: post.imageUrl!,
                placeholder: (context, url) => const CircularProgressIndicator(),
                errorWidget: (context, url, error) => const SizedBox.shrink(),
                width: double.infinity,
                fit: BoxFit.cover,
              ),
            const SizedBox(height: 8),
            Text(
              post.content,
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Icon(Icons.thumb_up, size: 16, color: Colors.grey[600]),
                const SizedBox(width: 4),
                Text('${post.upvotes ?? 0}'),
                const Spacer(),
                Text(
                  '${post.createdAt.day}/${post.createdAt.month}/${post.createdAt.year}',
                  style: TextStyle(color: Colors.grey[600], fontSize: 12),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

--- lib/views/profile_settings_screen.dart ---
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/pet.dart';
import '../providers/user_provider.dart';
import 'welcome_screen.dart';
import '../widgets/rounded_button.dart';

class ProfileSettingsScreen extends StatelessWidget {
  const ProfileSettingsScreen({super.key});

  Future<Pet?> _loadPet() async {
    final prefs = await SharedPreferences.getInstance();
    final pets = prefs.getString('pets') ?? '[]';
    final petsList = jsonDecode(pets) as List;
    if (petsList.isEmpty) return null;
    return Pet.fromJson(petsList.first as Map<String, dynamic>);
  }

  @override
  Widget build(BuildContext context) {
    final userProvider = Provider.of<UserProvider>(context);

    return Scaffold(
      appBar: AppBar(title: const Text('Profile')),
      body: FutureBuilder<Pet?>(
        future: _loadPet(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          final pet = snapshot.data;

          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'User: ${userProvider.email ?? 'N/A'}',
                  style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                if (pet != null) ...[
                  Text(
                    'Pet Profile',
                    style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  Text('Name: ${pet.name}', style: const TextStyle(fontSize: 16)),
                  Text('Species: ${pet.species}', style: const TextStyle(fontSize: 16)),
                  if (pet.breed != null) Text('Breed: ${pet.breed}', style: const TextStyle(fontSize: 16)),
                  if (pet.age != null) Text('Age: ${pet.age}', style: const TextStyle(fontSize: 16)),
                  if (pet.litterType != null) Text('Litter Type: ${pet.litterType}', style: const TextStyle(fontSize: 16)),
                  if (pet.tankSize != null) Text('Tank Size: ${pet.tankSize}', style: const TextStyle(fontSize: 16)),
                  if (pet.cageSize != null) Text('Cage Size: ${pet.cageSize}', style: const TextStyle(fontSize: 16)),
                  if (pet.favoriteToy != null) Text('Favorite Toy: ${pet.favoriteToy}', style: const TextStyle(fontSize: 16)),
                ] else ...[
                  const Text('No pet added yet', style: TextStyle(fontSize: 16)),
                ],
                const Spacer(),
                RoundedButton(
                  text: 'Sign Out',
                  onPressed: () {
                    userProvider.clearUser();
                    Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(builder: (context) => const WelcomeScreen()),
                    );
                  },
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

--- lib/views/ask_ai_screen.dart ---
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class AiMessage {
  final String text;
  final bool isUser;
  final String promptTemplate;

  AiMessage({
    required this.text,
    required this.isUser,
    required this.promptTemplate,
  });
}

class AiProvider with ChangeNotifier {
  String _selectedPrompt = 'My pet is feeling ___'; // Default prompt
  List<AiMessage> _messages = [];
  bool _isLoading = false;

  String get selectedPrompt => _selectedPrompt;
  List<AiMessage> get messages => _messages;
  bool get isLoading => _isLoading;

  void setPrompt(String prompt) {
    _selectedPrompt = prompt;
    notifyListeners();
  }

  void sendMessage(String userInput) {
    if (userInput.trim().isEmpty) return;

    _isLoading = true;
    notifyListeners();

    // Add user message
    _messages.add(AiMessage(
      text: '$_selectedPrompt: $userInput',
      isUser: true,
      promptTemplate: _selectedPrompt,
    ));

    // Simulate AI response placeholder (no mock service)
    // Future server integration will add AI response here

    _isLoading = false;
    notifyListeners();
  }

  void clearChat() {
    _messages = [];
    notifyListeners();
  }
}

class PromptDropdown extends StatelessWidget {
  const PromptDropdown({super.key});

  @override
  Widget build(BuildContext context) {
    final aiProvider = Provider.of<AiProvider>(context);
    const prompts = [
      'My pet is feeling ___',
      'My pet is ___',
      'My pet needs help with ___',
      'My pet ate ___',
    ];

    return Padding(
      padding: const EdgeInsets.only(top: 48.0, left: 16.0, right: 16.0, bottom: 8.0), // Notch padding
      child: DropdownButtonFormField<String>(
        value: aiProvider.selectedPrompt,
        decoration: InputDecoration(
          labelText: 'Select a Prompt',
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          filled: true,
          fillColor: Colors.white,
        ),
        items: prompts.map((prompt) {
          return DropdownMenuItem(
            value: prompt,
            child: Text(prompt),
          );
        }).toList(),
        onChanged: (value) {
          if (value != null) {
            aiProvider.setPrompt(value);
          }
        },
      ),
    );
  }
}

class MessageBubble extends StatelessWidget {
  final AiMessage message;

  const MessageBubble({super.key, required this.message});

  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: message.isUser ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 4.0, horizontal: 16.0),
        padding: const EdgeInsets.all(12.0),
        decoration: BoxDecoration(
          color: message.isUser ? Colors.blue[100] : Colors.grey[200],
          borderRadius: BorderRadius.circular(12.0),
        ),
        child: Text(
          message.text,
          style: const TextStyle(fontSize: 14),
        ),
      ),
    );
  }
}

class AskAiScreen extends StatelessWidget {
  const AskAiScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => AiProvider(),
      builder: (context, child) {
        final aiProvider = Provider.of<AiProvider>(context);
        final textController = TextEditingController();

        return Scaffold(
          appBar: AppBar(
            title: const Text('Ask AI'),
            actions: [
              IconButton(
                icon: const Icon(Icons.delete),
                onPressed: () => aiProvider.clearChat(),
                tooltip: 'Clear Chat',
              ),
            ],
          ),
          body: Column(
            children: [
              const PromptDropdown(),
              Expanded(
                child: aiProvider.messages.isEmpty
                    ? const Center(child: Text('Start a conversation!'))
                    : ListView.builder(
                        itemCount: aiProvider.messages.length,
                        itemBuilder: (context, index) {
                          return MessageBubble(
                              message: aiProvider.messages[index]);
                        },
                      ),
              ),
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: textController,
                        decoration: InputDecoration(
                          hintText: 'Fill in the blank...',
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          filled: true,
                          fillColor: Colors.white,
                        ),
                        onSubmitted: (value) {
                          aiProvider.sendMessage(value);
                          textController.clear();
                        },
                      ),
                    ),
                    const SizedBox(width: 8),
                    aiProvider.isLoading
                        ? const CircularProgressIndicator()
                        : IconButton(
                            icon: const Icon(Icons.send),
                            onPressed: () {
                              aiProvider.sendMessage(textController.text);
                              textController.clear();
                            },
                          ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}

--- lib/views/signup_screen.dart ---
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/api_service.dart';
import '../providers/user_provider.dart';
import 'pet_profile_creation_screen.dart';
import '../widgets/rounded_button.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  _SignupScreenState createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final ApiService _apiService = ApiService();
  bool _isLoading = false;

  void _signup() async {
    setState(() => _isLoading = true);
    try {
      await _apiService.signup(_emailController.text, _passwordController.text);
      await _apiService.login(_emailController.text, _passwordController.text);
      final userProvider = Provider.of<UserProvider>(context, listen: false);
      await userProvider.setUser(_emailController.text);
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const PetProfileCreationScreen()),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Signup failed')),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sign Up')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(labelText: 'Email'),
            ),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(labelText: 'Password'),
              obscureText: true,
            ),
            const SizedBox(height: 20),
            _isLoading
                ? const CircularProgressIndicator()
                : RoundedButton(text: 'Sign Up', onPressed: _signup),
          ],
        ),
      ),
    );
  }
}

--- lib/views/profile_screen.dart ---
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../models/pet.dart';

class ProfileScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Pet Profile')),
      body: FutureBuilder<Pet>(
        future: _loadPet(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError || !snapshot.hasData) {
            return Center(child: Text('Error loading pet'));
          }
          final pet = snapshot.data!;
          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Name: ${pet.name}', style: TextStyle(fontSize: 18)),
                Text('Type: ${pet.type}', style: TextStyle(fontSize: 18)),
                SizedBox(height: 10),
                ...pet.fields.entries.map((entry) {
                  return Text('${entry.key}: ${entry.value}', style: TextStyle(fontSize: 16));
                }),
              ],
            ),
          );
        },
      ),
    );
  }

  Future<Pet> _loadPet() async {
    final prefs = await SharedPreferences.getInstance();
    final pets = prefs.getString('pets') ?? '[]';
    final petsList = jsonDecode(pets) as List;
    if (petsList.isEmpty) throw Exception('No pet found');
    return Pet.fromJson(petsList.first as Map<String, dynamic>);
  }
}

--- lib/views/community_feed_screen.dart ---
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:shimmer/shimmer.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../services/api_service.dart';
import '../models/post.dart';
import 'post_detail_screen.dart';

// --- Providers ---

class FeedProvider with ChangeNotifier {
  String _selectedPetType = 'All'; // Default filter
  List<Post> _posts = [];
  bool _isLoading = false;

  String get selectedPetType => _selectedPetType;
  List<Post> get posts => _posts;
  bool get isLoading => _isLoading;

  void setPetType(String petType) {
    _selectedPetType = petType;
    notifyListeners();
  }

  Future<void> fetchPosts(BuildContext context) async {
    _isLoading = true;
    notifyListeners();

    try {
      final apiService = Provider.of<ApiService>(context, listen: false);
      _posts = await apiService.getPosts(petType: _selectedPetType);
    } catch (e) {
      _posts = []; // Clear posts on error
    }

    _isLoading = false;
    notifyListeners();
  }
}

// --- Widgets ---

class PetFilterDropdown extends StatelessWidget {
  const PetFilterDropdown({super.key});

  @override
  Widget build(BuildContext context) {
    final feedProvider = Provider.of<FeedProvider>(context);
    const petTypes = ['All', 'Dog', 'Cat', 'Turtle'];

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: DropdownButtonFormField<String>(
        value: feedProvider.selectedPetType,
        decoration: InputDecoration(
          labelText: 'Filter by Pet',
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          filled: true,
          fillColor: Colors.white,
        ),
        items: petTypes.map((type) {
          return DropdownMenuItem(
            value: type,
            child: Text(type),
          );
        }).toList(),
        onChanged: (value) {
          if (value != null) {
            feedProvider.setPetType(value);
            feedProvider.fetchPosts(context);
          }
        },
      ),
    );
  }
}

class PostCard extends StatelessWidget {
  final Post post;

  const PostCard({super.key, required this.post});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => PostDetailScreen(post: post),
          ),
        );
      },
      child: Card(
        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        elevation: 2,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  CircleAvatar(
                    child: Text(post.author[0]), // Mock avatar
                  ),
                  const SizedBox(width: 8),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        post.author,
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                      Text(
                        post.petType,
                        style: TextStyle(color: Colors.grey[600], fontSize: 12),
                      ),
                    ],
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                post.title,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 4),
              if (post.imageUrl != null)
                CachedNetworkImage(
                  imageUrl: post.imageUrl!,
                  placeholder: (context, url) => const CircularProgressIndicator(),
                  errorWidget: (context, url, error) => const SizedBox.shrink(),
                  width: double.infinity,
                  fit: BoxFit.cover,
                ),
              const SizedBox(height: 4),
              Text(
                post.content,
                style: const TextStyle(fontSize: 14),
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  Icon(Icons.thumb_up, size: 16, color: Colors.grey[600]),
                  const SizedBox(width: 4),
                  Text('${post.upvotes ?? 0}'),
                  const Spacer(),
                  Text(
                    '${post.createdAt.day}/${post.createdAt.month}/${post.createdAt.year}',
                    style: TextStyle(color: Colors.grey[600], fontSize: 12),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// --- Screen ---

class CommunityFeedScreen extends StatelessWidget {
  const CommunityFeedScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => FeedProvider()..fetchPosts(context),
      child: Consumer<FeedProvider>(
        builder: (context, feedProvider, child) {
          return Scaffold(
            body: RefreshIndicator(
              onRefresh: () => feedProvider.fetchPosts(context),
              child: Column(
                children: [
                  const PetFilterDropdown(),
                  Expanded(
                    child: feedProvider.isLoading
                        ? ListView.builder(
                            itemCount: 5,
                            itemBuilder: (context, index) {
                              return Shimmer.fromColors(
                                baseColor: Colors.grey[300]!,
                                highlightColor: Colors.grey[100]!,
                                child: Container(
                                  margin: const EdgeInsets.symmetric(
                                      horizontal: 16, vertical: 8),
                                  height: 150,
                                  color: Colors.white,
                                ),
                              );
                            },
                          )
                        : feedProvider.posts.isEmpty
                            ? const Center(
                                child: Text('No posts found for this pet type'))
                            : ListView.builder(
                                itemCount: feedProvider.posts.length,
                                itemBuilder: (context, index) {
                                  return PostCard(
                                      post: feedProvider.posts[index]);
                                },
                              ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}

--- lib/views/tracking_screen.dart ---
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/pet.dart';
import '../models/tracking_metric.dart';
import '../widgets/rounded_button.dart';

class TrackingScreen extends StatelessWidget {
  const TrackingScreen({super.key});

  Future<Pet> _loadPet() async {
    final prefs = await SharedPreferences.getInstance();
    final pets = prefs.getString('pets') ?? '[]';
    final petsList = jsonDecode(pets) as List;
    if (petsList.isEmpty) throw Exception('No pet found');
    return Pet.fromJson(petsList.first as Map<String, dynamic>);
  }

  bool _isCompleted(TrackingMetric metric) {
    if (metric.lastCompletion == null) return false;
    final now = DateTime.now();
    switch (metric.frequency) {
      case 'daily':
        return metric.lastCompletion!.year == now.year &&
            metric.lastCompletion!.month == now.month &&
            metric.lastCompletion!.day == now.day;
      case 'weekly':
        final startOfWeek = now.subtract(Duration(days: now.weekday - 1));
        return metric.lastCompletion!.isAfter(startOfWeek) ||
            metric.lastCompletion!.isAtSameMomentAs(startOfWeek);
      case 'monthly':
        return metric.lastCompletion!.year == now.year &&
            metric.lastCompletion!.month == now.month;
      default:
        return false;
    }
  }

  Future<void> _completeMetric(BuildContext context, Pet pet, TrackingMetric metric) async {
    final updatedMetric = TrackingMetric(
      id: metric.id,
      petId: metric.petId,
      name: metric.name,
      value: metric.value,
      frequency: metric.frequency,
      lastCompletion: DateTime.now(),
      createdAt: metric.createdAt,
    );
    final index = pet.metrics.indexWhere((m) => m.id == metric.id);
    if (index != -1) {
      pet.metrics[index] = updatedMetric;
    }
    final prefs = await SharedPreferences.getInstance();
    final pets = jsonDecode(prefs.getString('pets') ?? '[]') as List;
    if (pets.isNotEmpty) {
      pets[0] = pet.toJson();
      await prefs.setString('pets', jsonEncode(pets));
      if (kDebugMode) {
        print('TrackingScreen: Updated pet metrics');
      }
    }
    // Force rebuild
    (context as Element).markNeedsBuild();
  }

  Future<void> _addMetric(BuildContext context, Pet pet) async {
    String name = '';
    String frequency = 'daily';
    final result = await showDialog<Map<String, String>>(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Add New Metric'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                decoration: const InputDecoration(labelText: 'Metric Name'),
                onChanged: (value) => name = value,
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField<String>(
                value: frequency,
                decoration: const InputDecoration(labelText: 'Frequency'),
                items: ['daily', 'weekly', 'monthly'].map((f) {
                  return DropdownMenuItem(value: f, child: Text(f.capitalize()));
                }).toList(),
                onChanged: (value) => frequency = value!,
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                if (name.trim().isNotEmpty) {
                  Navigator.pop(context, {'name': name, 'frequency': frequency});
                }
              },
              child: const Text('Add'),
            ),
          ],
        );
      },
    );

    if (result != null) {
      final newMetric = TrackingMetric(
        id: '${pet.id ?? 1}-${DateTime.now().millisecondsSinceEpoch}',
        petId: '${pet.id ?? 1}',
        name: result['name'],
        frequency: result['frequency'],
        createdAt: DateTime.now(),
      );
      pet.metrics.add(newMetric);
      final prefs = await SharedPreferences.getInstance();
      final pets = jsonDecode(prefs.getString('pets') ?? '[]') as List;
      if (pets.isNotEmpty) {
        pets[0] = pet.toJson();
        await prefs.setString('pets', jsonEncode(pets));
        if (kDebugMode) {
          print('TrackingScreen: Added new metric ${result['name']}');
        }
      }
      // Force rebuild
      (context as Element).markNeedsBuild();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Pet Tracking')),
      body: FutureBuilder<Pet>(
        future: _loadPet(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError || !snapshot.hasData) {
            return const Center(child: Text('No pets added yet'));
          }
          final pet = snapshot.data!;
          if (pet.metrics.isEmpty) {
            return const Center(child: Text('No tracking metrics available'));
          }
          return ListView(
            padding: const EdgeInsets.all(16.0),
            children: pet.metrics.map((metric) {
              final isCompleted = _isCompleted(metric);
              return Card(
                margin: const EdgeInsets.symmetric(vertical: 8),
                child: ListTile(
                  title: Text(metric.name ?? 'Unnamed Metric'),
                  subtitle: Text('Frequency: ${metric.frequency?.capitalize() ?? 'Unknown'}'),
                  trailing: isCompleted
                      ? const Icon(Icons.check_circle, color: Colors.green)
                      : RoundedButton(
                          text: 'Complete',
                          onPressed: () => _completeMetric(context, pet, metric),
                        ),
                ),
              );
            }).toList(),
          );
        },
      ),
      floatingActionButton: FutureBuilder<Pet>(
        future: _loadPet(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) return const SizedBox.shrink();
          final pet = snapshot.data!;
          return FloatingActionButton(
            onPressed: () => _addMetric(context, pet),
            backgroundColor: Colors.blue,
            child: const Icon(Icons.add, color: Colors.white),
          );
        },
      ),
    );
  }
}

extension StringExtension on String {
  String capitalize() {
    if (isEmpty) return this;
    return "${this[0].toUpperCase()}${substring(1)}";
  }
}

--- lib/views/pet_detail_screen.dart ---
import 'package:flutter/material.dart';
import 'package:petform/models/pet.dart';

class PetDetailScreen extends StatelessWidget {
  final Pet pet;

  const PetDetailScreen({super.key, required this.pet});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(pet.name)),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Species: ${pet.species}'),
            if (pet.breed != null) Text('Breed: ${pet.breed}'),
            if (pet.age != null) Text('Age: ${pet.age}'),
            if (pet.personality != null) Text('Personality: ${pet.personality}'),
            if (pet.foodSource != null) Text('Food Source: ${pet.foodSource}'),
            if (pet.favoritePark != null) Text('Favorite Park: ${pet.favoritePark}'),
            if (pet.leashSource != null) Text('Leash Source: ${pet.leashSource}'),
            if (pet.litterType != null) Text('Litter Type: ${pet.litterType}'),
            if (pet.waterProducts != null) Text('Water Products: ${pet.waterProducts}'),
          ],
        ),
      ),
    );
  }
}

--- lib/views/login_screen.dart ---
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/api_service.dart';
import '../providers/user_provider.dart';
import 'main_screen.dart';
import '../widgets/rounded_button.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final ApiService _apiService = ApiService();
  bool _isLoading = false;

  void _login() async {
    setState(() => _isLoading = true);
    try {
      await _apiService.login(_emailController.text, _passwordController.text);
      final userProvider = Provider.of<UserProvider>(context, listen: false);
      await userProvider.setUser(_emailController.text);
      Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => const MainScreen()));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Login failed')));
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(controller: _emailController, decoration: const InputDecoration(labelText: 'Email')),
            TextField(controller: _passwordController, decoration: const InputDecoration(labelText: 'Password'), obscureText: true),
            const SizedBox(height: 20),
            _isLoading
                ? const CircularProgressIndicator()
                : RoundedButton(text: 'Log In', onPressed: _login),
          ],
        ),
      ),
    );
  }
}

--- lib/views/feed_screen.dart ---
import 'package:flutter/material.dart';
import 'package:petform/services/api_service.dart';
import 'package:petform/models/post.dart';
import 'package:petform/views/post_detail_screen.dart';

class FeedScreen extends StatefulWidget {
  const FeedScreen({super.key});

  @override
  _FeedScreenState createState() => _FeedScreenState();
}

class _FeedScreenState extends State<FeedScreen> {
  final ApiService _apiService = ApiService();
  List<PetAIPost> _posts = [];
  bool _isLoading = true;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _fetchPosts();
  }

  Future<void> _fetchPosts() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });
    try {
      final posts = await _apiService.getPosts('all', '');
      setState(() {
        _posts = posts;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
        _errorMessage = 'Failed to load posts: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Pet Community Feed')),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _errorMessage != null
              ? Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(_errorMessage!, style: const TextStyle(color: Colors.red)),
                      ElevatedButton(
                        onPressed: _fetchPosts,
                        child: const Text('Retry'),
                      ),
                    ],
                  ),
                )
              : RefreshIndicator(
                  onRefresh: _fetchPosts,
                  child: ListView.builder(
                    itemCount: _posts.length,
                    itemBuilder: (context, index) {
                      final post = _posts[index];
                      return ListTile(
                        title: Text(post.title ?? 'No Title'),
                        subtitle: Text(post.selftext ?? 'No Content'),
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => PostDetailScreen(post: post),
                            ),
                          );
                        },
                      );
                    },
                  ),
                ),
    );
  }
}

--- lib/views/welcome_screen.dart ---
import 'package:flutter/material.dart';
import 'signup_screen.dart';
import 'login_screen.dart';
import '../widgets/rounded_button.dart';

class WelcomeScreen extends StatelessWidget {
  const WelcomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            RoundedButton(
              text: 'Sign Up',
              onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (context) => const SignupScreen())),
            ),
            const SizedBox(height: 10),
            RoundedButton(
              text: 'Log In',
              onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (context) => const LoginScreen())),
            ),
          ],
        ),
      ),
    );
  }
}

--- lib/views/pet_profile_creation_screen.dart ---
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/pet.dart';
import '../services/api_service.dart';
import '../providers/user_provider.dart';
import '../views/main_screen.dart';
import '../widgets/rounded_button.dart';

class PetProfileCreationScreen extends StatefulWidget {
  const PetProfileCreationScreen({super.key});

  @override
  _PetProfileCreationScreenState createState() => _PetProfileCreationScreenState();
}

class _PetProfileCreationScreenState extends State<PetProfileCreationScreen> {
  final _formKey = GlobalKey<FormState>();
  String _selectedPetType = 'Dog';
  final _nameController = TextEditingController();
  final _ageController = TextEditingController();
  final Map<String, TextEditingController> _additionalFieldControllers = {};

  final Map<String, List<String>> _petFields = {
    'Dog': ['Breed', 'Favorite Toy'],
    'Cat': ['Breed', 'Litter Type'],
    'Turtle': ['Species', 'Tank Size'],
    'Bird': ['Species', 'Cage Size'],
  };

  final List<String> _petTypes = ['Dog', 'Cat', 'Turtle', 'Bird'];

  @override
  void initState() {
    super.initState();
    // Initialize controllers for additional fields
    _petFields.forEach((petType, fields) {
      for (var field in fields) {
        _additionalFieldControllers['$petType-$field'] = TextEditingController();
      }
    });
  }

  @override
  void dispose() {
    _nameController.dispose();
    _ageController.dispose();
    _additionalFieldControllers.forEach((key, controller) => controller.dispose());
    super.dispose();
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      final additionalFields = <String, String>{};
      for (var field in _petFields[_selectedPetType] ?? []) {
        additionalFields[field] = _additionalFieldControllers['$_selectedPetType-$field']?.text ?? '';
      }

      final pet = Pet(
        name: _nameController.text,
        species: _selectedPetType,
        breed: additionalFields['Breed'],
        age: int.tryParse(_ageController.text),
        litterType: additionalFields['Litter Type'],
        tankSize: additionalFields['Tank Size'],
        cageSize: additionalFields['Cage Size'],
        favoriteToy: additionalFields['Favorite Toy'],
      );

      try {
        await Provider.of<ApiService>(context, listen: false).createPet(pet);
        final userProvider = Provider.of<UserProvider>(context, listen: false);
        await userProvider.setUser(userProvider.email!); // Refresh pets
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const MainScreen()),
        );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Failed to create pet')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Pet Profile'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              DropdownButtonFormField<String>(
                value: _selectedPetType,
                decoration: const InputDecoration(
                  labelText: 'Pet Type',
                  border: OutlineInputBorder(),
                ),
                items: _petTypes.map((String type) {
                  return DropdownMenuItem<String>(
                    value: type,
                    child: Text(type),
                  );
                }).toList(),
                onChanged: (String? newValue) {
                  setState(() {
                    _selectedPetType = newValue!;
                  });
                },
                validator: (value) {
                  if (value == null) {
                    return 'Please select a pet type';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Name',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter a name';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _ageController,
                decoration: const InputDecoration(
                  labelText: 'Age (Optional)',
                  border: OutlineInputBorder(),
                ),
                keyboardType: TextInputType.number,
              ),
              const SizedBox(height: 16),
              if (_petFields[_selectedPetType] != null) ...[
                const Text(
                  'Additional Information (Optional)',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                ...(_petFields[_selectedPetType] ?? []).map((field) {
                  return Padding(
                    padding: const EdgeInsets.only(bottom: 16.0),
                    child: TextFormField(
                      controller: _additionalFieldControllers['$_selectedPetType-$field'],
                      decoration: InputDecoration(
                        labelText: field,
                        border: const OutlineInputBorder(),
                      ),
                    ),
                  );
                }),
              ],
              const SizedBox(height: 16),
              RoundedButton(
                text: 'Create Pet Profile',
                onPressed: _submitForm,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

--- lib/views/main_screen.dart ---
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/user_provider.dart';
import 'community_feed_screen.dart';
import 'ask_ai_screen.dart';
import 'tracking_screen.dart';
import 'profile_settings_screen.dart';

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  _MainScreenState createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  int _selectedIndex = 0;

  static final List<Widget> _pages = <Widget>[
    const CommunityFeedScreen(),
    const AskAiScreen(),
    const TrackingScreen(),
    const ProfileSettingsScreen(),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    final userProvider = Provider.of<UserProvider>(context);
    if (!userProvider.isLoggedIn) {
      return const Scaffold(body: Center(child: Text('Please log in')));
    }

    return Scaffold(
      body: IndexedStack(
        index: _selectedIndex,
        children: _pages,
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(icon: Icon(Icons.feed), label: 'Feed'),
          BottomNavigationBarItem(icon: Icon(Icons.question_answer), label: 'Ask AI'),
          BottomNavigationBarItem(icon: Icon(Icons.track_changes), label: 'Tracking'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Colors.blue,
        unselectedItemColor: Colors.grey,
        onTap: _onItemTapped,
        type: BottomNavigationBarType.fixed,
      ),
    );
  }
}

--- lib/views/home_screen.dart ---
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:petform/providers/user_provider.dart';
import 'package:petform/views/feed_screen.dart';
import 'package:petform/views/tracking_screen.dart';
import 'package:petform/views/pet_detail_screen.dart';
import 'package:petform/widgets/rounded_button.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final userProvider = Provider.of<UserProvider>(context);
    final user = userProvider.user;

    if (user == null) {
      return Scaffold(
        appBar: AppBar(title: const Text('Home')),
        body: const Center(child: CircularProgressIndicator()),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text('Welcome, ${user.email}'),
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: user.pets.length,
              itemBuilder: (context, index) {
                final pet = user.pets[index];
                return ListTile(
                  title: Text(pet.name),
                  subtitle: Text('${pet.species} - Age: ${pet.age ?? 'Unknown'}'),
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => PetDetailScreen(pet: pet),
                      ),
                    );
                  },
                );
              },
            ),
          ),
          RoundedButton(
            text: 'View Feed',
            onPressed: () {
              Navigator.push(context, MaterialPageRoute(builder: (context) => const FeedScreen()));
            },
          ),
          RoundedButton(
            text: 'Track Metrics',
            onPressed: () {
              if (user.pets.isNotEmpty) {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => TrackingScreen(petId: user.pets.first.id.toString()),
                  ),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Please add a pet first')),
                );
              }
            },
          ),
        ],
      ),
    );
  }
}

--- lib/services/api_service.dart ---
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/pet.dart';
import '../models/post.dart';
import '../models/tracking_metric.dart';

class ApiService {
  // Five mock posts for the UI foundation
  static final List<Map<String, dynamic>> _mockPosts = [
    {
      'id': 1,
      'title': 'Puppy Training 101',
      'content': 'Start with treats and patience to teach sit and stay.',
      'author': 'DogLover',
      'petType': 'Dog',
      'imageUrl': null,
      'upvotes': 50,
      'createdAt': DateTime.now().subtract(const Duration(days: 2)).toIso8601String(),
    },
    {
      'id': 2,
      'title': 'Cat Scratching Fix',
      'content': 'A tall scratching post saved my couch!',
      'author': 'CatFan',
      'petType': 'Cat',
      'upvotes': 30,
      'createdAt': DateTime.now().subtract(const Duration(days: 1)).toIso8601String(),
    },
    {
      'id': 3,
      'title': 'Turtle Tank Setup',
      'content': 'Clean water and UVB light are must-haves.',
      'author': 'TurtleGuru',
      'petType': 'Turtle',
      'upvotes': 20,
      'createdAt': DateTime.now().subtract(const Duration(hours: 12)).toIso8601String(),
    },
    {
      'id': 4,
      'title': 'Dog Park Vibes',
      'content': 'My pup had a blast chasing balls today.',
      'author': 'PetWalker',
      'petType': 'Dog',
      'upvotes': 45,
      'createdAt': DateTime.now().subtract(const Duration(hours: 6)).toIso8601String(),
    },
    {
      'id': 5,
      'title': 'Cat Toy Picks',
      'content': 'My kitty loves feather wands and laser pointers.',
      'author': 'KittyMom',
      'petType': 'Cat',
      'upvotes': 25,
      'createdAt': DateTime.now().subtract(const Duration(hours: 3)).toIso8601String(),
    },
  ];

  // Default metrics for each pet species
  static final Map<String, List<Map<String, String>>> _defaultMetrics = {
    'Dog': [
      {'name': 'Walking', 'frequency': 'daily'},
      {'name': 'Feeding', 'frequency': 'daily'},
      {'name': 'Grooming', 'frequency': 'weekly'},
    ],
    'Cat': [
      {'name': 'Litter Replacement', 'frequency': 'daily'},
      {'name': 'Feeding', 'frequency': 'daily'},
      {'name': 'Playtime', 'frequency': 'daily'},
    ],
    'Turtle': [
      {'name': 'Water Changes', 'frequency': 'weekly'},
      {'name': 'Feeding', 'frequency': 'daily'},
      {'name': 'UVB Light Check', 'frequency': 'monthly'},
    ],
    'Bird': [
      {'name': 'Cage Cleaning', 'frequency': 'weekly'},
      {'name': 'Feeding', 'frequency': 'daily'},
      {'name': 'Social Interaction', 'frequency': 'daily'},
    ],
  };

  Future<void> signup(String email, String password) async {
    await Future.delayed(const Duration(seconds: 1));
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_email', email);
    await prefs.setString('user_password', password);
    await prefs.setInt('user_id', DateTime.now().millisecondsSinceEpoch);
    await prefs.setString('pets', '[]');
    await prefs.setString('posts', '[]');
  }

  Future<void> login(String email, String password) async {
    await Future.delayed(const Duration(seconds: 1));
    final prefs = await SharedPreferences.getInstance();
    final storedEmail = prefs.getString('user_email');
    final storedPassword = prefs.getString('user_password');
    if (storedEmail != email || storedPassword != password) {
      throw Exception('Invalid credentials');
    }
  }

  Future<List<Pet>> getPets() async {
    await Future.delayed(const Duration(seconds: 1));
    final prefs = await SharedPreferences.getInstance();
    final petsJson = prefs.getString('pets') ?? '[]';
    final List<dynamic> petsData = jsonDecode(petsJson);
    return petsData.map((p) => Pet.fromJson(p)).toList();
  }

  Future<void> createPet(Pet pet) async {
    await Future.delayed(const Duration(seconds: 1));
    final prefs = await SharedPreferences.getInstance();
    final petsJson = prefs.getString('pets') ?? '[]';
    final List<dynamic> petsData = jsonDecode(petsJson);
    final defaultMetrics = _defaultMetrics[pet.species] ?? [];
    final newPet = Pet(
      id: petsData.length + 1,
      name: pet.name,
      species: pet.species,
      breed: pet.breed,
      age: pet.age,
      litterType: pet.litterType,
      tankSize: pet.tankSize,
      cageSize: pet.cageSize,
      favoriteToy: pet.favoriteToy,
      metrics: defaultMetrics.map((m) => TrackingMetric(
        id: '${petsData.length + 1}-${m['name']}',
        petId: '${petsData.length + 1}',
        name: m['name'],
        frequency: m['frequency'],
        createdAt: DateTime.now(),
      )).toList(),
    );
    petsData.add(newPet.toJson());
    await prefs.setString('pets', jsonEncode(petsData));
  }

  Future<List<Post>> getPosts({String? petType}) async {
    final posts = _mockPosts.map((p) => Post.fromJson(p)).toList();
    if (kDebugMode) {
      print('ApiService.getPosts: Returning ${posts.length} posts for petType: $petType');
    }
    if (petType == null || petType == 'All') return posts;
    final filteredPosts = posts.where((p) => p.petType == petType).toList();
    if (kDebugMode) {
      print('ApiService.getPosts: Filtered to ${filteredPosts.length} posts for $petType');
    }
    return filteredPosts;
  }
}

--- lib/widgets/rounded_button.dart ---
import 'package:flutter/material.dart';

class RoundedButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;

  const RoundedButton({super.key, required this.text, this.onPressed});

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30.0)),
      ),
      child: Text(text),
    );
  }
}
